#FROM COURSE UDEMY
#To run pod using nginx docker image to be used

#Image name should be from docker hub or other container registry
kubectl run nginx -- image=nginx

#Get status of pods 1/1 - number of containers
kubectl get pods

#More info about the pod -labels, ip address of the node and pod, num and described containers, events - what happens with the pod
kubectl describe pod nginx

IP - address of the pod
Node: Ip address of the node

# To see which image pod is based on
kubectl describe pod nginx | grep -i image

#Additional information, like the node where the pod is running and internal IP address of the pod within kubernetes cluster
#To see on which node the pod is running
kubectl get pods -o wide

#Delete pod webapp
kubectl delete pod webapp
#We use kubectl run command with --dry-run=client -o yaml option to create a manifest(definition) file
kubectl run redis --image=redis123 --dry-run=client -o yaml > redis-definition.yaml

#After that, using kubectl create -f command to create a resource from the manifest file :-
kubectl create -f redis-definition.yaml 
#To edit definition for pod redis - the name of the image can be fixed here, without deleting the pod!
kubectl edit pod redis
#Create deployment 
#--record - to point the reason for change of deployment - CHANGE-CAUSE
kubectl create -f deployment-def.yaml --record

#To see the details of deployment, 
#We can see in Annotations  the command we use for creating because of --record
kubectl describe deployment myapp-deployment

#To see what is wrong with definition
kubectl explain deployment | head -n1

#Rollout status for deployment
kubectl rollout status deployment/myapp-deployment
#Rollout history
kubectl rollout history deployment/myapp-deployment
#To do Rollback to previous revision
kubectl rollout undo deployment/myapp-deployment 
#If we have 3 revisions, it will revert from revision 3 to revision 2. When in history we will not
#See the revision number 2 because it the same revision as number 4 - the current one

#Edit existing version for image
kubectl edit deployment myapp-deployment --record
#Edit image for existing deployment
kubectl set image deployment mypp-deployment nginx=nginx:1.8-perl --record


kubectl get services
kubectl create -f service-definition.yaml
kubectl get svc
kubectl describe service

#Create service to access web application
kubectl apply -f /root/service-definition-1.yaml
#Create service
kubectl expose deployment simple-webapp-deployment --name=webapp-service --target-port=8080 --type=NodePort --port=8080 --dry-run=client -o yaml > svc.yaml

#Fix nodePort if you want - if not, will be assigned by default by Kubernetes in the range of 30,000 and â€¦
vim svc.yaml
kubectl apply -f svc.yaml
#Now to create Replication Controller
kubectl create -f rc-defintion.yml
#It first creates the pods as many as required - our case 3
#To see replication controller
kubectl get replicationcontroller
#To see the pods under replication controller - all the pods are starting with the name of the controller: myapp-rc
kubectl get pods

kubectl apply -f deployment-definition.yaml

kubectl set image deployment/myapp-deployment nginx=nginx:1.9.1

kubectl describe deployment myapp-deployment











